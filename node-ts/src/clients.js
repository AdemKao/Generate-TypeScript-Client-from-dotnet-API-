"use strict";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.ApiException = exports.WeatherForecastClient = exports.UserClient = void 0;
/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
var axios_1 = require("axios");
var UserClient = /** @class */ (function () {
    function UserClient(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1["default"].create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5001";
    }
    UserClient.prototype.get = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/User";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGet(_response);
        });
    };
    UserClient.prototype.processGet = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    return UserClient;
}());
exports.UserClient = UserClient;
var WeatherForecastClient = /** @class */ (function () {
    function WeatherForecastClient(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1["default"].create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5001";
    }
    WeatherForecastClient.prototype.get = function (cancelToken) {
        var _this = this;
        var url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken: cancelToken
        };
        return this.instance.request(options_)["catch"](function (_error) {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then(function (_response) {
            return _this.processGet(_response);
        });
    };
    WeatherForecastClient.prototype.processGet = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (var k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            var _responseText = response.data;
            var result200 = null;
            var resultData200 = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve(result200);
        }
        else if (status !== 200 && status !== 204) {
            var _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    };
    return WeatherForecastClient;
}());
exports.WeatherForecastClient = WeatherForecastClient;
var ApiException = /** @class */ (function (_super) {
    __extends(ApiException, _super);
    function ApiException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isApiException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    ApiException.isApiException = function (obj) {
        return obj.isApiException === true;
    };
    return ApiException;
}(Error));
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
function isAxiosError(obj) {
    return obj && obj.isAxiosError === true;
}
